commonfields:
  id: a083a079-3d22-4d6b-8363-ecfadc31bfbb
  version: 4
vcShouldKeepItemLegacyProdMachine: false
name: InstallAndArchivePythonLibrary_copy
script: |-
  register_module_line('InstallAndArchivePythonLibrary_copy', 'start', __line__)

  from pathlib import Path
  import shutil
  import shlex
  import subprocess
  from tempfile import mkdtemp
  from subprocess import Popen, PIPE
  import zipfile

  def installLibrary(dir_path: Path, library_name: str) -> str:
      try:
          # Install the package using pip
          cmd = f'python3 -m pip install --target {dir_path} {library_name}'
          process = subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
          stdout, stderr = process.communicate()

          if process.returncode != 0:
              return_error(f"Failed to install the {library_name} library: {stderr.decode('utf-8')}")

          # Create a zip file with maximum compression level
          zip_path = dir_path / (library_name + '.zip')
          with zipfile.ZipFile(zip_path, 'w', compression=zipfile.ZIP_DEFLATED, compresslevel=9) as zip_file:
              for root, dirs, files in os.walk(dir_path):
                  for file in files:
                      file_path = Path(root) / file
                      # Ensure the folder inside the ZIP file is named 'python'
                      arcname = Path('python') / file_path.relative_to(dir_path)
                      zip_file.write(file_path, arcname=arcname)

          # Read the zip file contents
          with open(zip_path, 'rb') as zip_file:
              zip_content = zip_file.read()

          return fileResult(library_name+'.zip', zip_content)

      except Exception as e:
          return_error(f"An error occurred: {str(e)}")

      finally:
          shutil.rmtree(dir_path)

  def main():
      args = demisto.args()
      library_name = args.get('library_name')
      dir_path = Path(mkdtemp(prefix='python'))
      result = installLibrary(dir_path, library_name)
      return_results(result)

  if __name__ in ('__builtin__', 'builtins'):
      main()

  register_module_line('InstallAndArchivePythonLibrary_copy', 'end', __line__())
type: python
tags:
- Utility
- file
comment: The script installs a Python library using pip and archive it.
enabled: true
args:
- name: library_name
  required: true
  description: The Python library you wish to install and archive
outputs:
- contextPath: ExtractedFiles
  description: A list of file names that were extracted from the ZIP file.
  type: Unknown
scripttarget: 0
subtype: python3
pswd: ""
runonce: false
dockerimage: demisto/py3-tools:1.0.0.89345
runas: DBotWeakRole
engineinfo: {}
mainengineinfo: {}
